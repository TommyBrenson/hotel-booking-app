{"version":3,"file":"static/js/831.55ca04bf.chunk.js","mappings":"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","sources":["app/components/common/Fields/HOC/withPassword.tsx","app/components/ui/forms/LoginForm/validatorConfig.ts","app/components/ui/forms/LoginForm/LoginForm.tsx","app/components/ui/forms/LoginForm/index.ts","app/components/common/Switch/Switch.tsx","app/components/common/Switch/index.ts","app/components/ui/forms/RegisterForm/validatorConfig.ts","app/components/ui/forms/RegisterForm/RegisterForm.tsx","app/components/ui/forms/RegisterForm/index.ts","app/hooks/useMockData.tsx","app/hooks/useModal.tsx","app/hooks/usePagination.tsx","app/hooks/useSort.tsx","app/hooks/useFiltersQuery.tsx","app/hooks/useForm.tsx","app/utils/validator.ts"],"sourcesContent":["import { IconButton, InputAdornment } from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport React, { useState } from 'react';\nimport { TextFieldProps as MuiTextFieldProps } from '@mui/material';\n\ntype InjectedProps = {};\n\nconst withPassword =\n  <P extends InjectedProps>(Component: React.ComponentType<P>) =>\n  (props: MuiTextFieldProps) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    const toggleShowPassword = () => {\n      setShowPassword(prevState => !prevState);\n    };\n\n    const handleMouseDownPassword = (e: React.MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault();\n    };\n\n    return (\n      <Component\n        {...(props as P)}\n        type={showPassword ? 'text' : 'password'}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position='end'>\n              <IconButton\n                aria-label='toggle password visibility'\n                onClick={toggleShowPassword}\n                onMouseDown={handleMouseDownPassword}\n                edge='end'\n              >\n                {showPassword ? <VisibilityOff /> : <Visibility />}\n              </IconButton>\n            </InputAdornment>\n          ),\n        }}\n      />\n    );\n  };\n\nexport default withPassword;\n","import { SignInDataType } from '../../../../types/types';\nimport { ValidatorConfigType } from '../../../../utils/validator';\n\ntype ConfigType = {\n  [Property in keyof SignInDataType]?: ValidatorConfigType[Property];\n};\n\nconst validatorConfig: ConfigType = {\n  email: {\n    isRequired: {\n      message: 'Электронная почта обязательна для заполнения',\n    },\n    isEmail: {\n      message: 'Поле \"Email\" введено не корректно',\n    },\n  },\n  password: {\n    isRequired: {\n      message: 'Поле \"Пароль\" обязательно для заполнения',\n    },\n  },\n};\n\nexport default validatorConfig;\n","import React, { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, useForm } from '../../../../hooks';\nimport { getAuthErrors, signIn } from '../../../../store/users';\nimport { SignInDataType } from '../../../../types/types';\nimport history from '../../../../utils/history';\nimport Button from '../../../common/Button/Button';\nimport { InputField } from '../../../common/Fields';\nimport withPassword from '../../../common/Fields/HOC/withPassword';\nimport validatorConfig from './validatorConfig';\n\nconst initialData: SignInDataType = {\n  email: '',\n  password: '',\n};\n\nconst LoginForm = () => {\n  const { data, errors, enterError, handleInputChange, validate, handleResetForm } = useForm(\n    initialData,\n    false,\n    validatorConfig\n  );\n  const loginError = useSelector(getAuthErrors());\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e: React.FormEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    if (validate(data)) {\n      const redirect = history.location.state ? history.location.state.from.pathname : '/';\n      dispatch(signIn({ payload: data, redirect }));\n      handleResetForm(e);\n    }\n  };\n\n  const InputFieldWithPassword = useMemo(() => withPassword(InputField), []);\n\n  return (\n    <>\n      <Form data={data} errors={errors} handleChange={handleInputChange}>\n        <InputField name='email' label='Email' autoFocus />\n        <InputFieldWithPassword name='password' label='Пароль' type='password' />\n        <Button onClick={handleSubmit} fullWidth type='submit' disabled={enterError ? true : false}>\n          Войти\n        </Button>\n      </Form>\n      {loginError && <p className='form__enter-error'>{loginError}</p>}\n    </>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from './LoginForm';\n\nexport default LoginForm;\n","import React from 'react';\nimport { FormControl, FormControlLabel, Switch as MuiSwitch, SwitchProps as MuiSwitchProps } from '@mui/material';\n\ntype onChange = {\n  target: {\n    name: string;\n    value: boolean;\n  };\n};\n\ntype SwitchProps = MuiSwitchProps & {\n  label: string;\n  onChange: (fn: onChange) => void;\n};\n\nconst Switch: React.FC<SwitchProps> = ({ label, value, name, onChange, ...rest }) => {\n  const convertToDefEventParam = (name: string, value: boolean) => ({\n    target: {\n      name,\n      value,\n    },\n  });\n\n  return (\n    <FormControl>\n      <FormControlLabel\n        control={\n          <MuiSwitch\n            name={name}\n            value={value}\n            onChange={(e, checked) => onChange(convertToDefEventParam(name || '', checked))}\n            {...rest}\n          />\n        }\n        label={label || ''}\n      />\n    </FormControl>\n  );\n};\n\nexport default Switch;\n","import Switch from './Switch';\n\nexport default Switch;\n","import { UserType } from '../../../../types/types';\nimport { ValidatorConfigType } from '../../../../utils/validator';\n\ntype ConfigType = {\n  [Property in keyof UserType]?: ValidatorConfigType[Property];\n};\n\nconst validatorConfig: ConfigType = {\n  firstName: {\n    isRequired: {\n      message: 'Поле \"Имя\" обязательно для заполнения',\n    },\n  },\n  secondName: {\n    isRequired: {\n      message: 'Поле \"Фамилия\" обязательно для заполнения',\n    },\n  },\n  email: {\n    isRequired: {\n      message: 'Электронная почта обязательна для заполнения',\n    },\n    isEmail: {\n      message: 'Поле \"Email\" введено не корректно',\n    },\n  },\n  password: {\n    isRequired: {\n      message: 'Поле \"Пароль\" обязательно для заполнения',\n    },\n    isCapitalSymbol: {\n      message: 'Пароль должен содержать хотя бы 1 заглавную букву',\n    },\n    isContainDigit: {\n      message: 'Пароль должен содержать хотя бы 1 цифру',\n    },\n\n    min: {\n      value: 8,\n      message: 'Пароль должен содержать минимум 8 символов',\n    },\n  },\n  \n};\n\nexport default validatorConfig;\n","import { TextField } from '@mui/material';\nimport React, { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, useForm } from '../../../../hooks';\nimport { getAuthErrors, signUp } from '../../../../store/users';\nimport { UserType } from '../../../../types/types';\nimport Button from '../../../common/Button/Button';\nimport { DatePickerField, InputField, RadioGroup } from '../../../common/Fields';\nimport withPassword from '../../../common/Fields/HOC/withPassword';\nimport Switch from '../../../common/Switch';\nimport validatorConfig from './validatorConfig';\n\nconst genderItems = [\n  { id: 'male', title: 'Мужчина' },\n  { id: 'female', title: 'Женщина' },\n];\n\nconst initialData: UserType = {\n  firstName: '',\n  secondName: '',\n  gender: 'male',\n  role: 'user',\n  birthYear: Date.now(),\n  email: '',\n  password: '',\n  subscribe: false,\n};\n\nconst RegisterForm = () => {\n  const { data, errors, handleInputChange, handleKeyDown, validate } = useForm(initialData, true, validatorConfig);\n\n  const loginError = useSelector(getAuthErrors());\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e: React.FormEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    if (validate(data)) {\n      dispatch(signUp(data));\n    }\n  };\n\n  const InputFieldWithPassword = useMemo(() => withPassword(InputField), []);\n\n  return (\n    <>\n      <Form data={data} errors={errors} handleChange={handleInputChange} handleKeyDown={handleKeyDown}>\n        <InputField autoFocus name='firstName' label='Имя' />\n        <InputField name='secondName' label='Фамилия' />\n        <RadioGroup name='gender' items={genderItems} />\n        <DatePickerField\n          value={data.birthYear}\n          onChange={handleInputChange}\n          openTo='year'\n          mask='__.__.____'\n          label='Дата Рождения'\n          name='birthYear'\n          minDate={new Date('1950-01-01')}\n          renderInput={params => (\n            <TextField {...params} {...(errors?.birthYear && { error: true, helperText: errors?.birthYear })} />\n          )}\n        />\n        <InputField name='email' label='Почта' />\n        <InputFieldWithPassword name='password' label='Пароль' type='password' />\n        <Switch name='subscribe' label='Получать спецпредложения' onChange={handleInputChange} />\n        <Button type='submit' onClick={handleSubmit} fullWidth disabled={Object.keys(errors).length !== 0}>\n          Зарегистрироваться\n        </Button>\n      </Form>\n      {loginError && <p className='form__enter-error'>{loginError}</p>}\n    </>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from './RegisterForm';\n\nexport default RegisterForm;\n","import { useEffect, useState } from 'react';\nimport httpService from '../services/http.service';\nimport { RoomType, UserType, ReviewType, LikeType } from '../types/types';\n\nconst rooms: Array<RoomType> = [];\nconst users: Array<UserType> = [];\nconst reviews: Array<ReviewType> = [];\nconst likes: Array<LikeType> = [];\n\nconst useMockData = () => {\n  const statusMap = {\n    idle: 'Not Started',\n    pending: 'In Process',\n    success: 'Ready',\n    error: 'Error occurred',\n  };\n  const [error, setError] = useState<Error | null>(null);\n  const [status, setStatus] = useState(statusMap.idle);\n  const [progress, setProgress] = useState(0);\n  const [count, setCount] = useState(0);\n  const summaryCount = [rooms, reviews, users, likes].reduce((acc, cur) => acc + cur.length, 0);\n\n  const incrementCount = () => {\n    setCount(prevState => prevState + 1);\n  };\n\n  const updateProgress = () => {\n    if (count !== 0 && status === statusMap.idle) {\n      setStatus(statusMap.pending);\n    }\n    const newProgress = Math.floor((count / summaryCount) * 100);\n    if (progress < newProgress) {\n      setProgress(() => newProgress);\n    }\n    if (newProgress === 100) {\n      setStatus(statusMap.success);\n    }\n  };\n\n  useEffect(() => {\n    updateProgress();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [count]);\n\n  async function initialize() {\n    try {\n      for (const room of rooms) {\n        await httpService.put('rooms/' + room._id, room);\n        incrementCount();\n      }\n      for (const user of users) {\n        await httpService.put('user/' + user._id, user);\n        incrementCount();\n      }\n      for (const review of reviews) {\n        await httpService.put('reviews/' + review._id, review);\n        incrementCount();\n      }\n      for (const like of likes) {\n        await httpService.put('likes/' + like._id, like);\n        incrementCount();\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        setError(error);\n        setStatus(statusMap.error);\n      }\n    }\n  }\n\n  return { error, initialize, progress, status };\n};\n\nexport default useMockData;\n","import { useCallback, useState } from 'react';\n\nfunction useModal() {\n  const [isOpen, setOpen] = useState<boolean>(false);\n\n  const handleOpenModal = () => {\n    setOpen(true);\n  };\n\n  const handleCloseModal = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  return { isOpen, handleOpenModal, handleCloseModal };\n}\n\nexport default useModal;\n","import { useCallback, useEffect, useState } from 'react';\n\nfunction usePagination<T>(items: Array<T>, defaultPageSize?: number, defaultCurrentPage?: number) {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage || 1);\n  const [pageSize, setPageSize] = useState(defaultPageSize || 5);\n\n  useEffect(() => {\n    if (items.length < pageSize) {\n      setCurrentPage(1);\n    }\n  }, [items, pageSize]);\n\n  const handleChangePage = useCallback((event, value) => {\n    setCurrentPage(value);\n  }, []);\n\n  const handleChangePageSize = useCallback(event => {\n    setPageSize(parseInt(event.target.value, 10));\n    setCurrentPage(1);\n  }, []);\n\n  const itemsListCrop = items.slice((currentPage - 1) * pageSize, (currentPage - 1) * pageSize + pageSize);\n\n  return { itemsListCrop, currentPage, pageSize, handleChangePage, handleChangePageSize } as const;\n}\n\nexport default usePagination;\n","import { useState } from 'react';\n\ntype Order = 'asc' | 'desc';\n\nexport default function useSort<T>(items: T[], initialSortBy: { path: keyof T; order: Order }) {\n  const [sortBy, setSortBy] = useState(initialSortBy || {});\n\n  function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n    if (b[orderBy] < a[orderBy]) {\n      return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n      return 1;\n    }\n    return 0;\n  }\n\n  function getComparator(order: Order, orderBy: keyof T) {\n    return order === 'desc'\n      ? (a: T, b: T) => descendingComparator(a, b, orderBy)\n      : (a: T, b: T) => -descendingComparator(a, b, orderBy);\n  }\n\n  function stableSort<T>(array: readonly T[], comparator: (a: T, b: T) => number) {\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n    stabilizedThis.sort((a, b) => {\n      const order = comparator(a[0], b[0]);\n      if (order !== 0) {\n        return order;\n      }\n      return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n  }\n\n  const handleRequestSort = (event: Event | React.MouseEvent<unknown>, property: keyof T) => {\n    const isAsc = sortBy.path === property && sortBy.order === 'asc';\n    setSortBy({ path: property, order: isAsc ? 'desc' : 'asc' });\n  };\n\n  const sortedItems = stableSort(items, getComparator(sortBy.order, sortBy.path));\n\n  return { sortedItems, sortBy, setSortBy, handleRequestSort };\n}\n","import { useLocation } from 'react-router';\nimport qs from 'query-string';\nimport { useCallback, useMemo } from 'react';\nimport omit from 'lodash.omit';\nimport history from '../utils/history';\n\nconst useFiltersQuery = () => {\n  const { search } = useLocation<string>();\n\n  const searchFilters = useMemo(() => qs.parse(search, { parseNumbers: true, parseBooleans: true }), [search]);\n\n  const setSearchQuery = useCallback(\n    filter => {\n      const search = qs.stringify(filter);\n      history.replace({ search });\n    },\n    [history]\n  );\n\n  const clearFilter = useCallback(\n    ({ target }) => {\n      const { name } = target;\n      const newFilter = omit(searchFilters, name);\n\n      setSearchQuery(newFilter);\n    },\n    [searchFilters, setSearchQuery]\n  );\n\n  const handleChangeFilter = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n      if (value === false || value === 0) {\n        const newFilter = { ...searchFilters, [name]: value };\n        setSearchQuery(newFilter);\n        return clearFilter({ target });\n      }\n      const newFilter = { ...searchFilters, [name]: value };\n      return setSearchQuery(newFilter);\n    },\n\n    [searchFilters, setSearchQuery, clearFilter]\n  );\n  const handleResetSearchFilters = useCallback(() => {\n    history.replace({});\n  }, [history]);\n\n  return { searchFilters, handleChangeFilter, handleResetSearchFilters };\n};\n\nexport default useFiltersQuery;\n","import React, { PropsWithChildren, ReactElement, useCallback, useState } from 'react';\nimport { validator, ValidatorConfigType } from '../utils/validator';\n\nfunction useForm<T>(initialData: T, validateOnChange: boolean, validatorConfig: ValidatorConfigType) {\n  const [data, setData] = useState<T>(initialData);\n  const [errors, setErrors] = useState<{ [x: string]: string }>({});\n  const [enterError, setEnterError] = useState<string | null>(null);\n\n  const validate = useCallback(\n    data => {\n      const errors = validator(data, validatorConfig);\n      setErrors(errors);\n      return Object.keys(errors).length === 0;\n    },\n    [validatorConfig, setErrors]\n  );\n\n  const handleInputChange = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n      setData(prevState => ({\n        ...prevState,\n        [name]: value,\n      }));\n      setEnterError(null);\n      setErrors({});\n      if (validateOnChange) validate({ [name]: value });\n    },\n    [validateOnChange, validate]\n  );\n\n  const handleKeyDown = useCallback(event => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      const form = event.target.form;\n      const formElements = [...form.elements].filter(\n        el => el.tagName.toLowerCase() === 'input' || el.tagName.toLowerCase() === 'button'\n      );\n      const indexField = Array.prototype.indexOf.call(formElements, event.target);\n      formElements[indexField + 1].focus();\n    }\n  }, []);\n\n  const handleResetForm = (event: React.FormEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    setData(initialData);\n    setErrors({});\n  };\n\n  return {\n    data,\n    setData,\n    errors,\n    setErrors,\n    enterError,\n    setEnterError,\n    handleInputChange,\n    handleKeyDown,\n    validate,\n    handleResetForm,\n  };\n}\n\ntype FormType = {\n  data: {\n    [key: string]: any;\n  };\n  errors?: {\n    [key: string]: any;\n  };\n  children?: React.ReactNode;\n  handleKeyDown?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\ntype FormItemProps = {\n  name: string;\n  data?: {\n    [key: string]: any;\n  };\n  value?: string;\n  error?: string;\n  type?: string;\n  props?: {\n    [key: string]: any;\n  };\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onKeyDown?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nfunction Form({ children, handleChange, data, errors, handleKeyDown, ...rest }: FormType) {\n  const clonedElements = React.Children.map(children, child => {\n    const item = child as ReactElement<PropsWithChildren<FormItemProps>>;\n    const childType = typeof item;\n    let config: FormItemProps = { name: '' };\n    if (\n      childType === 'object' ||\n      (childType === 'function' && item.props.type !== 'submit' && item.props.type !== 'button')\n    ) {\n      config = {\n        ...item.props,\n        data: data,\n        onChange: handleChange,\n        value: data[item.props.name],\n        error: errors?.[item.props.name],\n        onKeyDown: handleKeyDown,\n      };\n    }\n    return React.cloneElement(item, config);\n  });\n\n  return (\n    <form className='form' {...rest}>\n      {clonedElements}\n    </form>\n  );\n}\n\nexport { useForm, Form };\n","import { isValid } from 'date-fns/esm';\n\nexport type ConfigFieldNameType = {\n  message: string;\n  value?: number | number[];\n};\n\nexport type ValidatorConfigType = {\n  [key: string]: {\n    [key: string]: any;\n    isRequired?: ConfigFieldNameType;\n    isEmail?: ConfigFieldNameType;\n    isCapitalSymbol?: ConfigFieldNameType;\n    isContainDigit?: ConfigFieldNameType;\n    min?: ConfigFieldNameType;\n    isValidInterval?: ConfigFieldNameType;\n    isValidDate?: ConfigFieldNameType;\n  };\n};\n\nexport function validator(data: { [key: string]: any }, validatorConfig: ValidatorConfigType) {\n  const errors: { [key: string]: string } = {};\n\n  function validate(validateMethod: string, fieldData: string, config: ConfigFieldNameType) {\n    let statusValidate;\n    switch (validateMethod) {\n      case 'isRequired': {\n        if (typeof fieldData === 'boolean') {\n          statusValidate = !fieldData;\n        } else {\n          statusValidate = String(fieldData).trim() === '';\n        }\n        break;\n      }\n      case 'isEmail': {\n        const emailRegExp = /^\\S+@\\S+\\.\\S+$/g;\n        statusValidate = !emailRegExp.test(fieldData);\n        break;\n      }\n      case 'isCapitalSymbol': {\n        const capitalRegExp = /[A-Z]+/g;\n        statusValidate = !capitalRegExp.test(fieldData);\n        break;\n      }\n      case 'isContainDigit': {\n        const digitRegExp = /\\d+/g;\n        statusValidate = !digitRegExp.test(fieldData);\n        break;\n      }\n      case 'min': {\n        if (config.value) {\n          statusValidate = fieldData.length < config.value;\n        }\n        break;\n      }\n      case 'isValidInterval': {\n        if (Array.isArray(config.value)) {\n          statusValidate = !(Number(fieldData) >= config.value[0] && Number(fieldData) <= config.value[1]);\n        }\n        break;\n      }\n      case 'isValidDate': {\n        statusValidate = !isValid(fieldData);\n        break;\n      }\n      default:\n        break;\n    }\n    if (statusValidate) return config.message;\n  }\n\n  for (const fieldName in data) {\n    for (const validateMethod in validatorConfig[fieldName]) {\n      const error = validate(validateMethod, data[fieldName], validatorConfig[fieldName][validateMethod]);\n      if (error && !errors[fieldName]) {\n        errors[fieldName] = error;\n      }\n    }\n  }\n  return errors;\n}\n"],"names":["Component","props","useState","showPassword","setShowPassword","type","InputProps","endAdornment","position","onClick","prevState","onMouseDown","e","preventDefault","edge","email","isRequired","message","isEmail","password","initialData","useForm","validatorConfig","data","errors","enterError","handleInputChange","validate","handleResetForm","loginError","useSelector","getAuthErrors","dispatch","useDispatch","InputFieldWithPassword","useMemo","withPassword","InputField","handleChange","name","label","autoFocus","Button","redirect","history","signIn","payload","fullWidth","disabled","className","value","onChange","rest","FormControl","FormControlLabel","control","checked","target","convertToDefEventParam","firstName","secondName","isCapitalSymbol","isContainDigit","min","genderItems","id","title","gender","role","birthYear","Date","now","subscribe","handleKeyDown","items","openTo","mask","minDate","renderInput","params","TextField","error","helperText","signUp","Object","keys","length","rooms","users","reviews","likes","statusMap","setError","status","setStatus","progress","setProgress","count","setCount","summaryCount","reduce","acc","cur","incrementCount","room","httpService","_id","user","review","like","Error","useEffect","newProgress","Math","floor","updateProgress","initialize","isOpen","setOpen","handleOpenModal","handleCloseModal","useCallback","defaultPageSize","defaultCurrentPage","currentPage","setCurrentPage","pageSize","setPageSize","handleChangePage","event","handleChangePageSize","parseInt","itemsListCrop","slice","useSort","initialSortBy","sortBy","setSortBy","descendingComparator","a","b","orderBy","order","sortedItems","array","comparator","stabilizedThis","map","el","index","sort","stableSort","path","handleRequestSort","property","isAsc","search","useLocation","searchFilters","qs","parseNumbers","parseBooleans","setSearchQuery","filter","clearFilter","newFilter","omit","handleChangeFilter","handleResetSearchFilters","validateOnChange","setData","setErrors","setEnterError","validateMethod","fieldData","config","statusValidate","String","trim","test","Array","isArray","Number","isValid","fieldName","validator","keyCode","form","formElements","elements","tagName","toLowerCase","prototype","indexOf","call","focus","Form","children","clonedElements","React","child","item","childType","onKeyDown"],"sourceRoot":""}